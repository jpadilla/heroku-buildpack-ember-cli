#!/usr/bin/env bash

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3

buildpack_dir=$(cd $(dirname $0); cd ..; pwd)

# Load some convenience functions like status(), echo(), and indent()
source $buildpack_dir/bin/common.sh

export_env_dir $env_dir
build_env=${EMBER_ENV:-production}

mkdir -p $build_dir/vendor

status "Downloading and installing node"
node_version=0.10.30
node_url=http://s3pository.heroku.com/node/v$node_version/node-v$node_version-linux-x64.tar.gz
curl $node_url -s -o - | tar xzf - -C $build_dir
mv $build_dir/node-v$node_version-linux-x64 $build_dir/vendor/node
chmod +x $build_dir/vendor/node/bin/*
PATH=$build_dir/vendor/node/bin:$PATH

status "Downloading and installing nginx"
nginx_url=http://www.brettwhitelaw.com/pkg/nginx-1.6.0.tar.gz
curl $nginx_url -s -o - | tar xzf - -C $build_dir/vendor

status "Adding boot script"
cp $buildpack_dir/bin/boot.sh $build_dir

status "Copying configs"
mkdir -p $build_dir/config
cp $buildpack_dir/config/mime.types $build_dir/config
if [[ ! -f $build_dir/config/nginx.conf.erb ]]; then
  cp $buildpack_dir/config/nginx.conf.erb $build_dir/config
else
  status "Custom nginx config found"
fi

cd $build_dir

# If node_modules directory is checked into source control then
# rebuild any native deps. Otherwise, restore from the build cache.
if test -d $build_dir/node_modules; then
  status "Found existing node_modules directory; skipping cache"
  status "Rebuilding any native dependencies"
  npm rebuild 2>&1 | indent
elif test -d $cache_dir/node/node_modules; then
  status "Restoring node_modules directory from cache"
  cp -r $cache_dir/node/node_modules $build_dir/

  status "Pruning cached dependencies not specified in package.json"
  npm prune 2>&1 | indent

  if test -f $cache_dir/node/.heroku/node-version && [ $(cat $cache_dir/node/.heroku/node-version) != "$node_version" ]; then
    status "Node version changed since last build; rebuilding dependencies"
    npm rebuild 2>&1 | indent
  fi

fi

# Persist goodies like node-version in the slug
mkdir -p $build_dir/.heroku

# Save resolved node version in the slug for later reference
echo $node_version > $build_dir/.heroku/node-version

# Purge node-related cached content, being careful not to purge the top-level
# cache, for the sake of heroku-buildpack-multi apps.
rm -rf $cache_dir/node_modules # (for apps still on the older caching strategy)
rm -rf $cache_dir/node
mkdir -p $cache_dir/node

# If app has a node_modules directory, cache it.
if test -d $build_dir/node_modules; then
  status "Caching node_modules directory for future builds"
  cp -r $build_dir/node_modules $cache_dir/node
fi

# Copy goodies to the cache
cp -r $build_dir/.heroku $cache_dir/node

status "Cleaning up node-gyp and npm artifacts"
rm -rf "$build_dir/.node-gyp"
rm -rf "$build_dir/.npm"

status "Installing dependencies"
trap cat_npm_debug_log ERR # Output npm debug info on error
npm install bower --quiet | indent
npm install --quiet | indent

status "Building Ember CLI application $build_env distribution"
node_modules/.bin/bower install --quiet | indent
node_modules/ember-cli/bin/ember build --environment $build_env | indent
